package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func directory_list_go_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x94, 0x52,
		0x4d, 0x6f, 0xdb, 0x30, 0x0c, 0x3d, 0x2f, 0xbf, 0x82, 0xd0, 0xb0, 0xdd,
		0x6c, 0x2b, 0xc5, 0xba, 0x01, 0x99, 0xed, 0x01, 0xfb, 0x02, 0x0a, 0x2c,
		0xc3, 0xb0, 0xe4, 0x0f, 0xa8, 0x11, 0x1d, 0x0b, 0xb0, 0xe5, 0x42, 0x62,
		0x03, 0x64, 0x5a, 0xfe, 0xfb, 0xc8, 0xda, 0x75, 0xb3, 0x06, 0x3b, 0xcc,
		0x17, 0x3f, 0x3e, 0x3e, 0x8a, 0x4f, 0xa4, 0x52, 0xb2, 0xd8, 0x38, 0x8f,
		0xa0, 0xb6, 0x5b, 0x47, 0x1d, 0xaa, 0xd3, 0x69, 0x01, 0x90, 0x52, 0xbe,
		0x36, 0xbb, 0x96, 0xf9, 0xd3, 0x09, 0x5e, 0xef, 0xe9, 0xbd, 0x30, 0x3f,
		0x0c, 0xb5, 0x9c, 0x4d, 0x09, 0xbd, 0xe5, 0xff, 0xe2, 0xac, 0xf4, 0xd3,
		0xe0, 0x09, 0x3d, 0x49, 0x71, 0xd9, 0x2e, 0xeb, 0x59, 0x5c, 0x16, 0x1c,
		0x2d, 0x4a, 0xeb, 0x0e, 0x10, 0xe9, 0xd8, 0x61, 0xa5, 0x9a, 0x6e, 0x30,
		0xb4, 0x0a, 0x6e, 0xdf, 0x92, 0xe2, 0x4c, 0xc1, 0xa9, 0x51, 0x50, 0x8f,
		0x6d, 0x3f, 0x9a, 0x88, 0x37, 0xbe, 0x19, 0xf2, 0xf5, 0x60, 0xb7, 0xae,
		0xc7, 0xfc, 0xeb, 0x10, 0x7a, 0x43, 0xa0, 0xae, 0xb4, 0x7e, 0x9b, 0xe9,
		0x65, 0xa6, 0xaf, 0x60, 0x79, 0xbd, 0xd2, 0x6f, 0x56, 0xfa, 0x1a, 0x32,
		0xfd, 0x4e, 0x6b, 0x58, 0x6f, 0xb6, 0xb3, 0xeb, 0xf3, 0x72, 0xf1, 0x9e,
		0x31, 0x5d, 0x1a, 0x68, 0x03, 0x36, 0x95, 0xfa, 0x10, 0xaa, 0xa5, 0xaa,
		0x7f, 0xe2, 0xee, 0x3e, 0x44, 0x77, 0x40, 0xf8, 0xe6, 0x22, 0x95, 0x85,
		0xb9, 0xb0, 0x51, 0x92, 0xb9, 0xed, 0x50, 0x90, 0xe0, 0x16, 0x8d, 0x1d,
		0xb1, 0x44, 0xa1, 0x5e, 0xbc, 0x60, 0xae, 0xfe, 0x6e, 0x7a, 0x2c, 0x0b,
		0x06, 0x63, 0xc8, 0xed, 0x5c, 0xe3, 0xd0, 0x3e, 0x51, 0xb0, 0xeb, 0x4c,
		0x8c, 0x95, 0xf2, 0xf7, 0x3d, 0x06, 0xb7, 0x53, 0xf5, 0xc6, 0xfd, 0x7a,
		0x56, 0x31, 0x85, 0xd3, 0xd1, 0x85, 0x9c, 0x3d, 0xa1, 0xa7, 0x9e, 0x25,
		0xdd, 0x0e, 0xf6, 0xf8, 0x28, 0x4a, 0x29, 0x18, 0xbf, 0x47, 0xc8, 0xbf,
		0x78, 0x0a, 0x0e, 0xe3, 0xc3, 0xb5, 0x27, 0x63, 0x40, 0xb2, 0xbf, 0x4a,
		0xa5, 0x74, 0x17, 0x9c, 0xa7, 0x06, 0xd4, 0xab, 0x97, 0x07, 0x05, 0xf9,
		0xe6, 0xc8, 0x32, 0x05, 0xd6, 0x90, 0xc9, 0xee, 0x78, 0x2b, 0xa2, 0x08,
		0xd8, 0x09, 0x84, 0x9c, 0x33, 0x0f, 0x7e, 0xac, 0xec, 0x4c, 0xee, 0x24,
		0x3b, 0xe3, 0x68, 0xe6, 0xfe, 0x77, 0x0d, 0x53, 0xb5, 0x7c, 0x29, 0xb9,
		0x06, 0xf2, 0x9b, 0xf8, 0xd9, 0x05, 0xf6, 0x29, 0x07, 0x5e, 0xcc, 0xe4,
		0x2f, 0x35, 0x76, 0x11, 0xff, 0x25, 0x64, 0x27, 0x32, 0x3f, 0xf8, 0x0d,
		0x4d, 0x4f, 0x91, 0xd1, 0xb3, 0x4e, 0xe3, 0x93, 0x3c, 0x33, 0x3d, 0x0b,
		0xce, 0xa7, 0x3b, 0x0b, 0x27, 0xea, 0x71, 0xb4, 0x0c, 0xc7, 0x8d, 0x4f,
		0x0f, 0x61, 0x92, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x40, 0x0d, 0x4b,
		0xc1, 0x1c, 0x03, 0x00, 0x00,
		},
		"directory-list.go.html",
	)
}

func error_go_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x74, 0x8f,
		0x41, 0xcb, 0x82, 0x40, 0x10, 0x86, 0xef, 0xfe, 0x8a, 0x61, 0x3f, 0xbe,
		0xab, 0x12, 0x78, 0x0a, 0xf1, 0x12, 0x1d, 0xbb, 0x84, 0x7f, 0x40, 0xf0,
		0xb5, 0x84, 0x5a, 0x75, 0x9c, 0x8a, 0x98, 0xf6, 0xbf, 0x37, 0x6e, 0x04,
		0x79, 0xf0, 0xb2, 0xec, 0xfb, 0xf2, 0x3c, 0x33, 0x8c, 0x6a, 0x83, 0xb6,
		0xf3, 0x20, 0x57, 0x55, 0x9d, 0x5c, 0xe0, 0x42, 0x48, 0x88, 0xf6, 0xcc,
		0x3d, 0x27, 0xaa, 0xf0, 0x8d, 0xe5, 0xe4, 0x07, 0xda, 0xf5, 0x5e, 0xe0,
		0x65, 0xc6, 0x8a, 0xf3, 0xa6, 0x8c, 0x60, 0x91, 0xd9, 0xcf, 0x62, 0x5e,
		0x1e, 0x30, 0x4d, 0xf5, 0x09, 0x5b, 0x6b, 0x72, 0x6b, 0x06, 0x46, 0xa9,
		0x9a, 0x82, 0x39, 0x8d, 0x60, 0x08, 0x45, 0x36, 0x77, 0x91, 0x3d, 0xd6,
		0x8f, 0xcf, 0x9e, 0x25, 0x6d, 0xaf, 0xc8, 0xb3, 0xbd, 0x0a, 0xcd, 0x1e,
		0xbd, 0x68, 0xe0, 0xce, 0x4b, 0x4b, 0xee, 0xff, 0x8f, 0xee, 0x6e, 0x39,
		0x01, 0xe3, 0x0d, 0x93, 0xac, 0xfa, 0x8c, 0x71, 0xd5, 0xff, 0xde, 0xf6,
		0x0e, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x44, 0xe1, 0x7f, 0x00, 0x01, 0x00,
		0x00,
		},
		"error.go.html",
	)
}

func root_list_go_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x5c, 0x90,
		0xcd, 0x6a, 0xc3, 0x30, 0x10, 0x84, 0xcf, 0xf5, 0x53, 0x2c, 0x2a, 0xed,
		0xcd, 0xb6, 0x1c, 0x9a, 0x16, 0x52, 0xd5, 0x97, 0x42, 0xa0, 0x50, 0xf7,
		0xd0, 0xf8, 0x05, 0x94, 0x6a, 0x1d, 0x0b, 0x6c, 0x29, 0xd8, 0x4b, 0xc0,
		0x08, 0xbf, 0x7b, 0x25, 0xff, 0x34, 0x25, 0xb7, 0xd1, 0xc7, 0xac, 0x76,
		0x66, 0x9d, 0x53, 0x58, 0x69, 0x83, 0xc0, 0xca, 0x52, 0x53, 0x83, 0x6c,
		0x1c, 0x23, 0x00, 0xe7, 0x92, 0x42, 0xfe, 0xd4, 0x9e, 0x8f, 0x23, 0x3c,
		0x9e, 0xe8, 0x15, 0xbe, 0xad, 0x25, 0xf8, 0xd4, 0x3d, 0x45, 0xce, 0xa1,
		0x51, 0xde, 0x15, 0xfd, 0x1b, 0x7d, 0xb7, 0x86, 0xd0, 0x50, 0x18, 0x16,
		0x75, 0x96, 0xef, 0x75, 0x83, 0xfd, 0xd0, 0x13, 0xb6, 0xd3, 0x5c, 0x2f,
		0x52, 0x0f, 0x23, 0xa1, 0xf4, 0x25, 0xf7, 0x9f, 0x0b, 0x92, 0xc7, 0x06,
		0x83, 0x0a, 0xba, 0x46, 0xa9, 0x66, 0x1d, 0x5e, 0x5d, 0x1e, 0xdd, 0x79,
		0x96, 0x7f, 0xc9, 0x16, 0x45, 0xea, 0xc5, 0xfc, 0x2c, 0xac, 0xd2, 0x95,
		0x46, 0x35, 0xa3, 0xc5, 0x9c, 0x06, 0xf7, 0xa2, 0xae, 0xbf, 0x08, 0x3a,
		0x5a, 0x35, 0xac, 0x26, 0xe7, 0x3a, 0x69, 0x4e, 0x08, 0x49, 0xc8, 0xf1,
		0x61, 0x2a, 0xdb, 0x4f, 0xfd, 0x96, 0x65, 0x40, 0xa1, 0xf2, 0x1b, 0x73,
		0xee, 0xdc, 0x69, 0x43, 0x15, 0xb0, 0x87, 0xfb, 0x0b, 0x83, 0xe4, 0x30,
		0x78, 0x1b, 0x03, 0x25, 0x49, 0xc6, 0x67, 0x49, 0x75, 0x70, 0x24, 0x21,
		0x92, 0xa7, 0x53, 0x22, 0x95, 0xff, 0x01, 0xbf, 0x5c, 0x5d, 0x99, 0x0f,
		0x5a, 0xea, 0x16, 0x93, 0xbd, 0xed, 0x5a, 0x49, 0xc0, 0x36, 0x9c, 0x3f,
		0xc7, 0x3c, 0x8b, 0xf9, 0x06, 0xb2, 0xed, 0x8e, 0x3f, 0xed, 0xf8, 0x16,
		0x62, 0xfe, 0xc2, 0x39, 0x14, 0x87, 0x92, 0xad, 0xd3, 0xb7, 0x85, 0x42,
		0xee, 0xf9, 0xc8, 0x0b, 0x5f, 0x2b, 0x79, 0x39, 0xdf, 0x4e, 0xa4, 0xd3,
		0x31, 0x17, 0xdb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xd6, 0xa7,
		0x5b, 0xc5, 0x01, 0x00, 0x00,
		},
		"root-list.go.html",
	)
}

func layout_go_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x94,
		0xcd, 0x6e, 0xd4, 0x30, 0x10, 0xc7, 0xcf, 0xf4, 0x29, 0x86, 0x50, 0x94,
		0x5d, 0xd1, 0x7c, 0xac, 0x10, 0x48, 0xa4, 0xd9, 0x72, 0x28, 0x1c, 0x11,
		0x1c, 0xca, 0x01, 0x21, 0x0e, 0x5e, 0xdb, 0x89, 0xdd, 0x3a, 0x76, 0xb0,
		0x27, 0x6c, 0x57, 0x55, 0xdf, 0x9d, 0x78, 0xbd, 0x29, 0xf1, 0xaa, 0x68,
		0xe3, 0x43, 0x26, 0xf6, 0xfc, 0x7f, 0x1e, 0xcf, 0x38, 0x53, 0xbf, 0xfc,
		0xf4, 0xf5, 0xfa, 0xe6, 0xc7, 0xb7, 0xcf, 0x20, 0xb0, 0x53, 0x57, 0x67,
		0x75, 0x78, 0x01, 0xd4, 0x82, 0x13, 0xe6, 0x8d, 0xd1, 0x44, 0x89, 0x8a,
		0x07, 0xfb, 0xe1, 0x01, 0x79, 0xd7, 0x2b, 0x82, 0x1c, 0x92, 0x9b, 0x1b,
		0x3f, 0x9f, 0x40, 0xfe, 0xf8, 0x18, 0xfc, 0x8a, 0x99, 0x63, 0xad, 0xa4,
		0xbe, 0x03, 0x61, 0x79, 0xb3, 0x4e, 0x8b, 0xa2, 0x31, 0x1a, 0x5d, 0xde,
		0x1a, 0xd3, 0x2a, 0x4e, 0x7a, 0xe9, 0x72, 0x6a, 0xba, 0x82, 0x3a, 0xf7,
		0xb1, 0x21, 0x9d, 0x54, 0xbb, 0xf5, 0xf7, 0xcd, 0xa0, 0x71, 0x78, 0xf3,
		0xc5, 0x68, 0x93, 0x82, 0xe5, 0x6a, 0x9d, 0x3a, 0xdc, 0x29, 0xee, 0x04,
		0xe7, 0x98, 0x02, 0xee, 0x7a, 0xbe, 0x4e, 0x91, 0xdf, 0xa3, 0xd7, 0xa4,
		0x87, 0x0d, 0x1c, 0xb5, 0xb2, 0x47, 0x70, 0x96, 0xae, 0x93, 0xa2, 0x20,
		0xb7, 0xe4, 0xfe, 0x78, 0x03, 0x3f, 0x57, 0x28, 0xb9, 0x71, 0xc5, 0xed,
		0xef, 0x81, 0xdb, 0x5d, 0xb1, 0xca, 0x57, 0xab, 0xbc, 0x3c, 0x7c, 0xe5,
		0x9d, 0xd4, 0xf9, 0xad, 0x4b, 0xae, 0xea, 0x22, 0xa0, 0x22, 0x6e, 0xf8,
		0x38, 0x5f, 0x34, 0x83, 0xa6, 0x28, 0x8d, 0x5e, 0x2c, 0x1f, 0xce, 0x5e,
		0x9c, 0x2f, 0x12, 0xb4, 0x3f, 0x19, 0x41, 0x92, 0xf5, 0x04, 0xc5, 0xaf,
		0x64, 0x99, 0x53, 0x25, 0xe9, 0xdd, 0xcc, 0x0b, 0x46, 0x37, 0xaf, 0xdc,
		0x4a, 0xcd, 0xcc, 0x36, 0x57, 0x86, 0x12, 0xbf, 0x90, 0xfb, 0x4c, 0xc0,
		0x7a, 0x04, 0xa2, 0x90, 0x6e, 0x99, 0x7b, 0xc6, 0x22, 0xf1, 0x90, 0x64,
		0x79, 0xe9, 0x15, 0x8f, 0xe3, 0x0b, 0xf6, 0xcf, 0x64, 0x1d, 0x87, 0xe5,
		0x13, 0x12, 0xec, 0x8d, 0x61, 0xbb, 0x50, 0x8d, 0x83, 0x64, 0x43, 0xe8,
		0x5d, 0x6b, 0xcd, 0xa0, 0x59, 0x46, 0x8d, 0x32, 0xb6, 0x82, 0x57, 0xab,
		0xd2, 0x8f, 0x89, 0x39, 0xcd, 0xf2, 0xc6, 0x8f, 0x69, 0xd6, 0x57, 0x25,
		0x0b, 0x15, 0xa8, 0x20, 0x0d, 0x35, 0x80, 0x7d, 0x0d, 0x2e, 0x20, 0x4d,
		0x27, 0xaf, 0x9e, 0x30, 0x26, 0x75, 0x9b, 0x29, 0xde, 0x60, 0x05, 0xab,
		0xb2, 0xbf, 0x0f, 0x2b, 0xa1, 0xe8, 0x48, 0x36, 0x8a, 0x03, 0x5a, 0xb8,
		0x82, 0x4a, 0x1b, 0x5c, 0x54, 0x8d, 0xb4, 0x0e, 0x33, 0x2a, 0xa4, 0x62,
		0x63, 0x32, 0x60, 0x2b, 0x24, 0xf2, 0xcc, 0xf5, 0x84, 0xf2, 0x0a, 0xb4,
		0xd9, 0x5a, 0xd2, 0x5f, 0x8e, 0xc9, 0x61, 0x28, 0x46, 0xd6, 0x88, 0x9a,
		0x51, 0xa2, 0x23, 0x75, 0xc4, 0xb6, 0x52, 0x67, 0x68, 0xfa, 0xd1, 0xef,
		0xdd, 0xb4, 0x27, 0x4c, 0xd2, 0x0f, 0xe5, 0xeb, 0x28, 0x0a, 0x11, 0x89,
		0xfd, 0x55, 0xc9, 0x88, 0x92, 0xad, 0xae, 0x7c, 0xd4, 0x47, 0x27, 0xa9,
		0x60, 0xe4, 0xed, 0xa1, 0x4f, 0xc6, 0xc4, 0x0a, 0x30, 0x76, 0x71, 0x0c,
		0x8c, 0x73, 0x30, 0x0b, 0x67, 0x5a, 0xb0, 0xb2, 0x15, 0xf1, 0xca, 0x2c,
		0x06, 0xf8, 0x17, 0xc4, 0x21, 0x5c, 0x16, 0xd1, 0xe9, 0x60, 0x9d, 0x2f,
		0x4f, 0x6f, 0xa4, 0x46, 0x6e, 0xe7, 0x9e, 0xb9, 0x1e, 0x3a, 0x6e, 0x25,
		0xfd, 0xdf, 0xf1, 0x60, 0xbf, 0xf1, 0x53, 0x72, 0xe6, 0xc9, 0xee, 0x2d,
		0x8f, 0x8f, 0x65, 0x2b, 0x8d, 0x22, 0x54, 0x66, 0x61, 0x18, 0x5b, 0x9e,
		0xba, 0x42, 0x6f, 0x4b, 0x3f, 0x62, 0x86, 0xbf, 0x7a, 0x9e, 0x24, 0xcc,
		0x1f, 0x6e, 0x4f, 0x01, 0xca, 0xfd, 0x13, 0x03, 0xc4, 0x29, 0xd1, 0xfb,
		0xd2, 0x8f, 0x48, 0x44, 0xe2, 0x6c, 0x3d, 0x73, 0x97, 0xa7, 0x06, 0xf4,
		0xf4, 0x93, 0xd4, 0xc5, 0xd4, 0xbf, 0x6a, 0x1f, 0xf2, 0x33, 0xcd, 0xeb,
		0x7a, 0xbc, 0xfc, 0x5c, 0xe3, 0xd4, 0xbe, 0xea, 0x22, 0xf8, 0x8d, 0x42,
		0xdf, 0x01, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xda, 0x40, 0xde, 0x93,
		0x18, 0x05, 0x00, 0x00,
		},
		"layout.go.html",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"directory-list.go.html": directory_list_go_html,
	"error.go.html": error_go_html,
	"root-list.go.html": root_list_go_html,
	"layout.go.html": layout_go_html,
}
