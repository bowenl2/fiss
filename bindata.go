// Code generated by go-bindata.
// sources:
// templates/directory-list.go.html
// templates/error.go.html
// templates/layout.go.html
// templates/root-list.go.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _directoryListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x0c\x78\xe8\x4d\x0f\xa7\xd9\xb6\xd0\xca\x0e\x90\xa4\x45\x03\xec\x06\x41\xe3\x7b\x41\x8b\x23\x8b\x08\x4d\x0a\x14\x6d\xaf\xeb\xea\xbf\x77\x28\x4b\x8a\x1e\xf6\x22\xdd\xc3\x92\x9a\xf7\x7c\x33\x1f\x7d\xb9\x08\xcc\xa5\x46\x60\x9b\x8d\x74\x0a\x59\x5d\x2f\x2e\x97\xf0\x99\x67\x05\x49\xeb\x1a\x7e\xda\xb9\x47\x20\xc9\x17\xee\x8a\x46\x87\x5a\xd0\xb9\x18\x38\x7e\x30\xda\xa1\x76\xde\x35\xad\xdc\x59\x21\xb8\x73\x89\x2b\xe6\xf0\xc5\x45\x59\x55\xb1\xf5\x02\x0e\x2a\xcc\xec\x61\xbf\x85\x0b\x94\x5c\x08\xa9\x77\x81\xc2\xdc\x25\x10\x3f\x42\xbd\x00\x25\x7b\xb5\x90\x55\xa9\xf8\x39\x01\xa9\x15\xc5\x7f\x24\x5d\xe5\x82\x26\x6e\xe0\xe3\x26\xa0\x8d\x17\x0f\xbc\x12\x9e\x3b\xb4\xe4\x9b\x5d\x2b\x49\x80\x41\x04\x6c\x6c\xa3\x38\x85\xa1\xae\x94\x48\xb6\x98\x1b\x8b\x23\xfb\xfb\xc6\xf3\xd8\x8d\x6d\x1a\x35\x25\xad\x17\x8b\x54\xc8\x23\x64\xe4\x51\xad\x98\x35\x27\x38\xa1\x52\x0c\x1a\xed\x8a\xed\xb9\xdd\x49\x1d\x38\x53\x26\xcb\x87\xf2\xc5\x43\x01\x43\x87\xcc\xa8\xe0\xa5\x0a\x7e\x6b\x14\xa4\x2a\x7e\xbe\x5e\xe8\x7a\x50\xbd\x91\xaf\x89\x75\x0a\xa0\x71\x58\xae\x77\x08\xe1\x7b\x8b\x5c\x7c\xf0\xda\x8a\xc0\x87\xfe\x2f\x55\xf2\x9e\x6f\xa3\xe6\x50\x58\xcc\x57\x8c\xe6\xfa\x24\xf5\xb7\xba\x66\x6b\xba\xbe\xe7\x15\x6a\xbe\xa7\xa9\xa7\x11\x1f\x7a\xa4\x91\x92\xc3\xec\xd7\x15\xe8\x74\x07\xd5\xd6\x1e\x75\xc5\xb7\xb1\x3e\xe9\xdc\x84\xcf\x46\x6c\xe4\x1e\xc3\x3f\x8c\xdd\x73\x07\xec\x4d\x1c\xff\x12\xc4\xcb\x20\x7e\x03\xcb\x87\x24\x7e\x9b\xc4\x0f\x10\xc4\xbf\xc6\x31\x3c\x7f\xdd\xb0\x36\xec\x24\x00\xb6\x62\x0f\xdc\xba\xdf\xc5\x34\xf2\x9f\x1e\xcf\xfe\x32\x07\xf6\x2d\xf8\x2d\x0c\xac\xdc\x15\xae\xc3\x78\x60\xb5\x75\x3a\xd8\x59\x73\x28\x83\x23\x5a\x27\x33\x4e\x93\xb3\xc6\x0f\xae\x91\xf6\xb8\x11\x62\xdf\x3d\xc0\x7b\x49\xaa\x8d\xb5\x30\xbe\xb3\xab\xe5\x00\xe2\xb4\x07\x3f\xe7\x90\xf3\xc0\x2f\x30\x5b\xa7\xd1\x00\xc3\xbf\x30\x3b\xd8\x4a\x1e\x11\x9e\x48\xd9\x43\xc9\xef\xe7\x2b\xad\xa4\x5d\x3a\x77\x29\xa3\x57\xf2\x15\x66\x8f\x93\x7c\x7f\x92\xe8\x47\xb2\x9c\xb8\xd5\xc4\xcd\x2e\x4b\x18\xbe\x96\x47\xe1\x11\x55\xe0\x51\x1a\xe5\xfa\xc2\x2d\xf1\x64\x9a\x6d\x3a\xad\xee\x18\x93\xe7\xca\x0f\xc7\xb7\xf4\x88\xb4\xd2\xeb\x47\xf3\x9f\x5e\x01\x2b\x4b\x14\xed\x57\x61\x68\x68\xed\x7d\x6b\xac\x40\x8b\xa2\x9b\xb1\x2b\x88\x19\x7d\x9f\xce\x0e\xba\x70\xc5\xfa\x33\x6d\x79\x1a\xd1\x65\x24\xa5\x4d\x93\xb9\x44\x31\xd3\xf4\xa5\x0c\x56\xe9\xab\xfc\xe7\x76\x88\x1b\xd2\x8f\x4f\x43\x19\xdd\x6d\x87\xc9\xa0\xcc\xd4\x6d\x8d\x38\x77\x46\x3d\xc5\x7f\xd7\xd4\x33\x0e\xe9\x4d\xdd\x74\x05\x5d\x2e\x32\x87\xf0\x53\xf5\x51\xda\xba\xf6\x1b\xd9\x72\x93\x81\xe0\x8e\x07\x25\xf1\xc4\x1b\xf9\x33\xdf\x3b\x08\x3d\xd1\x87\xbc\x76\xe2\xee\xc3\x30\xf2\x21\xce\x7d\xbe\xfd\x30\x8c\x23\xf8\x80\xfe\xd7\xe3\x7f\x72\x7e\x1a\x66\xd4\xd6\xb8\x40\x27\x6e\x0d\x63\x1e\x00\x55\x85\x3f\xe6\x4b\xf5\xfa\x59\xc2\xbf\x50\xd1\x41\x2d\xdf\xaa\x67\xf8\xe2\x8d\x1b\xc5\xb9\xf9\x0c\xd6\xa6\x1f\x6d\xdc\xed\x9e\xee\xc1\xfe\x4e\xa8\xd1\xb3\xd2\x5b\x4f\x68\x28\xcc\x49\x2b\xc3\xc5\x84\x86\xdd\x84\xf8\xb4\x96\x69\x2f\x77\xc7\x4e\xd4\xb2\x3b\x74\x2b\xf6\xf7\x56\x71\xfd\x6d\x56\xca\xb4\x10\x02\x15\xad\xe6\x8a\x1e\x3c\x6f\x3d\xab\xe6\xd5\xe5\xf9\xce\x8a\x71\x8d\x24\xef\x78\x41\x57\xcf\xf5\xfe\xed\xe8\xcc\xfe\x0b\x00\x00\xff\xff\x1d\xce\xe2\x48\xc4\x08\x00\x00")

func directoryListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_directoryListGoHtml,
		"directory-list.go.html",
	)
}

func directoryListGoHtml() (*asset, error) {
	bytes, err := directoryListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "directory-list.go.html", size: 2244, mode: os.FileMode(436), modTime: time.Unix(1449453114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x41\xcb\x82\x40\x10\x86\xef\xfe\x8a\x61\x3f\xbe\xab\x12\x78\x0a\xf1\x12\x1d\xbb\x84\x7f\x40\xf0\xb5\x84\x5a\x75\x9c\x8a\x98\xf6\xbf\x37\x6e\x04\x79\xf0\xb2\xec\xfb\xf2\x3c\x33\x8c\x6a\x83\xb6\xf3\x20\x57\x55\x9d\x5c\xe0\x42\x48\x88\xf6\xcc\x3d\x27\xaa\xf0\x8d\xe5\xe4\x07\xda\xf5\x5e\xe0\x65\xc6\x8a\xf3\xa6\x8c\x60\x91\xd9\xcf\x62\x5e\x1e\x30\x4d\xf5\x09\x5b\x6b\x72\x6b\x06\x46\xa9\x9a\x82\x39\x8d\x60\x08\x45\x36\x77\x91\x3d\xd6\x8f\xcf\x9e\x25\x6d\xaf\xc8\xb3\xbd\x0a\xcd\x1e\xbd\x68\xe0\xce\x4b\x4b\xee\xff\x8f\xee\x6e\x39\x01\xe3\x0d\x93\xac\xfa\x8c\x71\xd5\xff\xde\xf6\x0e\x00\x00\xff\xff\xd6\x44\xe1\x7f\x00\x01\x00\x00")

func errorGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorGoHtml,
		"error.go.html",
	)
}

func errorGoHtml() (*asset, error) {
	bytes, err := errorGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.go.html", size: 256, mode: os.FileMode(436), modTime: time.Unix(1448692517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xdd\x4e\xe3\x3c\x10\xbd\xff\x9e\xc2\x9f\x6f\x51\xe3\x86\x50\x5a\x56\x29\x52\xa1\xd9\x45\x15\xa5\x85\x56\xe9\xc2\x9d\x9b\x3a\x89\x5d\xff\x24\xb6\x43\x13\x10\xef\xbe\x49\x5b\xa0\x8b\xf6\x47\x2b\xed\x5e\x65\x7c\xc6\x9e\x33\x47\x33\x27\xfe\xff\xc3\xc9\xe5\xfc\x7e\x1a\x80\xd4\x0a\x7e\xfe\x9f\xbf\xfb\x00\xe0\xa7\x04\xaf\x9a\xa0\x0e\x2d\xb5\x9c\xec\x62\x00\x9e\x9f\x2d\x11\x19\xc7\x96\x00\x38\x9f\x37\x19\x08\x9c\x97\x97\xdd\x4d\x74\x70\xd5\x37\x91\xa6\x99\x05\x46\x47\x7d\x88\x10\x66\xb8\x74\x12\xa5\x12\x4e\x70\x46\x8d\x13\x29\xb1\xc5\x10\xa7\x4b\x83\x58\x5e\x10\x5d\x21\xd7\x71\x5d\xa7\xbd\x3f\x39\x82\x4a\x87\x19\x78\xee\xa3\x5d\xa9\x7d\x5d\x4e\xe5\x1a\x68\xc2\xfb\xd0\xd8\x8a\x13\x93\x12\x62\x21\x48\x35\x89\xfb\x30\xb5\x36\x33\x9f\x10\x12\xb8\x8c\x56\xd2\x59\x2a\x65\x8d\xd5\x38\x6b\x0e\x0d\xe3\x1b\x80\x3c\xc7\x73\x4e\x51\x64\xcc\x3b\xb6\x25\xac\x11\x08\xa8\xb4\x24\xd1\xd4\x56\x35\x47\x8a\xbd\xde\x49\xcb\xcd\x7b\x62\x3e\x9a\x0c\x66\x65\x8f\xb9\x83\xe2\x08\x77\x16\xc3\x50\x4e\xe9\x31\x5f\x7f\x8e\x37\x9b\x60\x80\x7b\xe9\x70\xb8\x62\x0f\x3c\xbb\x26\x49\x99\xb2\x70\x1c\xb8\x71\xc2\x16\xd3\x2f\x62\xfd\x64\xba\x10\x44\x5a\x19\xa3\x34\x4d\xa8\xec\x43\x2c\x95\xac\x84\x2a\x6a\x75\xff\x58\x54\xcb\xa6\x44\x90\x5f\x49\x8b\xaf\x17\xc7\x37\x6d\x97\x8f\x73\x86\xd7\x17\xeb\xd2\xe3\x68\x7c\x16\xe0\xb4\xd8\x64\xb3\x98\xdc\x3c\x86\xa7\xde\xa8\x43\x9e\xa4\x57\x3c\x3c\xe1\x6c\xde\x2e\xba\xc1\xbd\xf9\x3a\x66\xb7\xe1\x51\x3b\x90\x1d\xfd\x3b\x69\x87\x7b\xf0\xa7\x52\xd8\xc7\xf1\xb0\x1f\x4a\x68\x8b\xd9\x72\x34\x0c\xae\x28\xe6\xb1\x28\x2e\x2e\x6e\xa7\xa7\x83\x93\x5b\x9d\xe9\xbc\x33\x09\xe3\x85\xd7\x9d\xde\xdd\x79\xac\x13\x5c\xe7\xa5\x31\x6e\x15\xe6\x13\x2b\x49\x26\xaf\xc2\xe9\x19\x1e\x75\xcb\xd9\xcf\x25\xfc\xc5\xdd\x8b\x95\xb4\x2d\xbc\x21\x46\x09\x82\x4e\x9c\x4e\xbd\xe8\xcd\xa4\x0e\xe1\xb7\x31\x6d\x2d\x88\x5e\x3d\xe8\x2f\xd5\xaa\xda\x77\xb0\xa2\x8f\x20\xe2\xd8\x98\x3e\x8c\xea\x97\x98\x4a\xa2\xe1\xab\x39\xbf\xcf\xf2\x56\x69\x5a\xae\xfb\x96\xfd\x60\xde\xcb\xfa\x39\x91\xf6\xdd\xbe\x0d\x65\x5d\x60\x4f\xf4\x1a\xfa\x68\xc7\x5e\xb7\xb3\xfd\x37\x7c\x0b\x00\x00\xff\xff\x9f\xbd\x22\xd4\x33\x04\x00\x00")

func layoutGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutGoHtml,
		"layout.go.html",
	)
}

func layoutGoHtml() (*asset, error) {
	bytes, err := layoutGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.go.html", size: 1075, mode: os.FileMode(436), modTime: time.Unix(1449452259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rootListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcd\x6a\xc3\x30\x10\x84\xcf\xf5\x53\x2c\x2a\xed\xcd\xb6\x1c\x9a\x16\x52\xd5\x97\x42\xa0\x50\xf7\xd0\xf8\x05\x94\x6a\x1d\x0b\x6c\x29\xd8\x4b\xc0\x08\xbf\x7b\x25\xff\x34\x25\xb7\xd1\xc7\xac\x76\x66\x9d\x53\x58\x69\x83\xc0\xca\x52\x53\x83\x6c\x1c\x23\x00\xe7\x92\x42\xfe\xd4\x9e\x8f\x23\x3c\x9e\xe8\x15\xbe\xad\x25\xf8\xd4\x3d\x45\xce\xa1\x51\xde\x15\xfd\x1b\x7d\xb7\x86\xd0\x50\x18\x16\x75\x96\xef\x75\x83\xfd\xd0\x13\xb6\xd3\x5c\x2f\x52\x0f\x23\xa1\xf4\x25\xf7\x9f\x0b\x92\xc7\x06\x83\x0a\xba\x46\xa9\x66\x1d\x5e\x5d\x1e\xdd\x79\x96\x7f\xc9\x16\x45\xea\xc5\xfc\x2c\xac\xd2\x95\x46\x35\xa3\xc5\x9c\x06\xf7\xa2\xae\xbf\x08\x3a\x5a\x35\xac\x26\xe7\x3a\x69\x4e\x08\x49\xc8\xf1\x61\x2a\xdb\x4f\xfd\x96\x65\x40\xa1\xf2\x1b\x73\xee\xdc\x69\x43\x15\xb0\x87\xfb\x0b\x83\xe4\x30\x78\x1b\x03\x25\x49\xc6\x67\x49\x75\x70\x24\x21\x92\xa7\x53\x22\x95\xff\x01\xbf\x5c\x5d\x99\x0f\x5a\xea\x16\x93\xbd\xed\x5a\x49\xc0\x36\x9c\x3f\xc7\x3c\x8b\xf9\x06\xb2\xed\x8e\x3f\xed\xf8\x16\x62\xfe\xc2\x39\x14\x87\x92\xad\xd3\xb7\x85\x42\xee\xf9\xc8\x0b\x5f\x2b\x79\x39\xdf\x4e\xa4\xd3\x31\x17\xdb\x6f\x00\x00\x00\xff\xff\xa9\xd6\xa7\x5b\xc5\x01\x00\x00")

func rootListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rootListGoHtml,
		"root-list.go.html",
	)
}

func rootListGoHtml() (*asset, error) {
	bytes, err := rootListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "root-list.go.html", size: 453, mode: os.FileMode(436), modTime: time.Unix(1448692517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"directory-list.go.html": directoryListGoHtml,
	"error.go.html": errorGoHtml,
	"layout.go.html": layoutGoHtml,
	"root-list.go.html": rootListGoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"directory-list.go.html": &bintree{directoryListGoHtml, map[string]*bintree{}},
	"error.go.html": &bintree{errorGoHtml, map[string]*bintree{}},
	"layout.go.html": &bintree{layoutGoHtml, map[string]*bintree{}},
	"root-list.go.html": &bintree{rootListGoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

