// Code generated by go-bindata.
// sources:
// templates/directory-list.go.html
// templates/error.go.html
// templates/layout.go.html
// templates/login.html
// templates/root-list.go.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _directoryListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x0c\x78\xe8\x8d\x92\xb2\xdd\xb4\x85\x23\xbb\xe8\xee\xb6\xe8\x02\xc9\x62\xd1\xcd\xbd\xa0\xc5\x91\x45\x2c\x45\x1a\xe4\xd8\x89\xc3\xea\xbf\x17\x94\x2d\x55\x0f\x3b\x48\x2f\x96\x34\xcf\x6f\xbe\x79\x38\x04\x89\xa5\x32\x08\xec\xf1\x51\x91\x46\xd6\x34\x8b\x10\x92\x07\x51\x54\xca\x60\xd3\xc0\x0f\x5b\xba\x83\x10\x92\xaf\x82\xaa\x56\x87\x46\x36\xcd\x62\x31\x70\xfc\x68\x0d\xa1\xa1\xe8\x9a\x7b\x3a\x6a\x04\x3a\xee\x70\xc5\x08\x9f\x29\x2d\xbc\x67\xeb\x05\xec\x75\x52\xb8\x7d\xbd\x81\x00\x3b\x21\xa5\x32\x5b\xae\xb1\xa4\x25\x64\x77\xd0\x2c\x40\xab\x5e\x2d\x95\xdf\x69\x71\x5c\x82\x32\x5a\x19\xbc\x03\xad\x3c\xf1\x36\x2e\x8f\x71\x97\x60\x6c\x14\x0f\xbc\x96\xa2\x24\x74\x10\xa0\x38\x21\x59\x02\x83\x14\xd8\xd8\x46\x0b\x4f\xbc\xa8\x94\x96\xcb\x0d\x96\xd6\xe1\xc8\xfe\xba\xf1\x3c\x76\x6b\x9b\xa7\x2d\xa4\xf5\x62\x91\x4b\x75\x80\x42\x0b\xef\x57\xcc\xd9\x27\x78\x42\xad\x19\xb4\xda\x15\xab\x85\xdb\x2a\xc3\xc9\xee\x96\x37\xb7\xbb\xe7\x48\x05\x0c\x1d\x0a\xab\xf9\xb3\xe7\xbf\xb4\x0a\x80\xbc\xfa\xf1\xf4\x02\x90\xef\x75\x6f\x14\x31\xb1\x4e\x01\x10\x82\x13\x66\x8b\x90\x7c\x70\x28\xe4\xc7\xa8\xf5\x4d\xd3\xab\x01\x72\xad\xae\xf9\xb6\x6a\x01\x95\xc3\x72\xc5\x42\x48\xee\x95\xf9\xde\x34\x6c\x1d\x42\xf2\x41\x78\x34\xa2\xc6\xa6\xc9\x53\x31\xf4\xc8\x53\xad\x86\xd9\x4f\x23\xd0\xe9\xf6\xfa\x8c\x3d\xed\xc0\x9f\x63\x7d\x36\xa5\x4d\x1e\xac\x7c\x54\x35\x26\x7f\x58\x57\x0b\x02\xf6\x2e\xcb\x7e\xe2\xd9\x0d\xcf\xde\xc1\xcd\xed\x32\x7b\xbf\xcc\x6e\x81\x67\x3f\x67\x19\x3c\x7c\x7b\x64\xe7\xb0\x93\x00\x78\x16\x47\xe2\xd6\xfd\x2c\xe6\x69\xfc\x8c\x7c\xf6\x2f\x73\x62\xdf\x43\x9c\x42\xee\xd4\xb6\xa2\x8e\xe3\x81\xd5\x86\x0c\xdf\x3a\xbb\xdf\xf1\x03\x3a\x52\x85\xd0\x0c\x9c\x8d\x8d\x6b\xa5\x3d\x6f\xb9\x18\x78\x40\xf4\x52\xa6\xb4\xec\x4c\xe3\xaf\x65\x4d\xab\xc2\x1f\x06\x34\xe7\x7d\x03\x4a\x01\xa5\xe0\x71\x88\xd9\x3a\x4f\x07\x3c\xfe\x85\xc5\xde\x79\x75\x40\xb8\x57\x9e\x7a\x3a\xc5\xf5\x9c\x32\x76\xdd\x8d\xb2\x4a\xfd\x4a\xd2\x52\x69\xe4\xc2\x15\x95\x3a\x20\xb7\x93\xf4\xbf\x9d\xe4\x6f\xc9\xbb\x73\xaa\x16\xee\xd8\x25\x4e\x5f\x49\x59\xd9\x1a\x27\x89\xfe\xb4\xf5\x9b\xb2\x3c\x09\x67\x94\xd9\x76\x59\x92\xe4\xb5\x3c\x1a\x0f\xa8\x79\xec\xd0\x28\xd7\x57\xe1\xd0\xcc\xb8\x9c\x4e\x4a\xf7\x18\x2f\xee\x69\x37\x49\x6c\x34\x76\xd2\xd3\x47\xfb\xcb\x3d\x39\xb5\x43\x79\xfe\xaa\xec\x01\xdd\xf9\x7d\x63\x9d\x44\x87\xb2\x9b\x2f\xaa\x50\xc8\xbe\x4e\x72\x83\x2a\xa8\x5a\x7f\x11\x35\xe6\x29\x55\x63\xe9\x83\x95\xaa\x54\x28\x67\x9a\x1e\xca\x60\x8c\xbf\xa9\x97\xcb\x21\x2e\x48\x3f\xdd\x0f\x65\x79\xda\xc1\x89\xd2\x1e\x66\x4e\x1b\x2b\x8f\x9d\x51\x7f\x5e\x7e\x37\xe4\x14\x0e\x4f\x4b\x4e\xae\x03\x14\x82\x2a\x21\xf9\xec\x3f\x29\xd7\x34\x71\x1b\xce\x77\x81\x81\x14\x24\xf8\x4e\x50\x15\x8d\xe2\xb3\xac\x09\x92\x78\x64\x86\x37\x85\xe4\xd5\xa3\x34\xf2\x09\x21\xf9\x72\xf9\x28\x8d\x23\xc4\x80\xf1\x9f\xeb\x7f\xde\x9b\x69\x98\x51\x59\x63\x80\x24\x2f\x35\x63\x1e\x00\xb5\xc7\xb7\xf9\x86\x90\xc4\x5e\xc2\x3f\xe0\xd5\x0b\x96\x35\x5d\xc2\x33\xbc\xb6\xe3\x42\x71\x6e\x3e\xa3\xb5\xad\xc7\x58\xba\x5c\xd3\x35\xda\xe7\xb7\xa5\xb7\x9f\x2c\xa2\xb4\x4f\x46\x5b\x21\x27\x8b\xd8\xf5\x48\x4c\xd1\x4c\xab\xb9\xda\x78\x20\xe1\xb6\x48\x2b\xf6\xf7\x46\x0b\xf3\x7d\x06\x65\x0a\x04\x9f\x09\x9d\x11\x9a\x6b\x15\xad\x67\x68\x5e\x1d\x9f\xff\xf6\x62\x8c\x31\x4f\xfb\xcd\xc8\xd3\x76\xdb\xfb\xeb\xd1\x99\xfd\x1b\x00\x00\xff\xff\x2f\x6a\x77\xde\x42\x09\x00\x00")

func directoryListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_directoryListGoHtml,
		"directory-list.go.html",
	)
}

func directoryListGoHtml() (*asset, error) {
	bytes, err := directoryListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "directory-list.go.html", size: 2370, mode: os.FileMode(438), modTime: time.Unix(1494749355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcf\xc1\xea\x82\x40\x10\xc7\xf1\xfb\x3e\xc5\xb0\x7f\xfe\x57\x45\xf0\x14\xcb\x5e\xa2\x63\x97\xf0\x05\x04\x7f\xb6\x42\xad\x3a\x4e\x45\x6c\xf3\xee\xa1\x11\xe4\xc1\xeb\xf0\xf9\xce\x30\x29\x35\x68\xbb\x08\xb2\x55\xd5\xc9\x05\x56\xd5\x10\x1d\x98\x7b\x36\x29\x21\x36\xaa\xc6\xfc\xa0\x7d\x1f\x05\x51\x66\xe6\x42\xe1\x17\xe8\xf2\x50\x78\xe3\x42\xe9\x8f\x98\xa6\xfa\x8c\x9d\xcb\x43\xe9\x8d\x1b\x18\x3e\xa5\x0c\xcc\xd9\x02\x55\x5d\x3e\xcf\x16\x7b\xaa\x1f\x9f\x3b\x6b\x3d\x30\x44\x9e\xed\x55\x68\xee\xe8\x45\x03\x77\x51\x5a\xb2\xff\x7f\x74\xb7\xeb\x0d\x18\x6f\x98\x64\xb3\x67\x8c\x9b\xfd\xf7\xb7\x77\x00\x00\x00\xff\xff\xd6\x44\xe1\x7f\x00\x01\x00\x00")

func errorGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorGoHtml,
		"error.go.html",
	)
}

func errorGoHtml() (*asset, error) {
	bytes, err := errorGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.go.html", size: 256, mode: os.FileMode(438), modTime: time.Unix(1494749355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\x5b\x6f\xe2\x3c\x10\x7d\xff\x7e\x85\x3f\xbf\x56\xd8\xa4\x29\x85\xae\x42\x25\x5a\xb2\x5b\xa1\x52\x68\x41\x61\xdb\x37\x13\x1c\x62\xe3\x4b\xf0\x38\x25\xb4\xea\x7f\x5f\x71\x69\xcb\x56\x7b\xd1\x4a\xbb\x4f\x99\x39\x33\x9a\x93\xa3\x99\xe3\xe8\xff\xee\xe0\x72\x7c\x3f\x8c\x51\xee\xb5\x3a\xff\x2f\xda\x7d\x10\x8a\x72\xce\x66\x9b\x00\xa1\xc8\x0b\xaf\xf8\x2e\x46\xe8\xf9\xd9\x73\x5d\x28\xe6\x39\xc2\xe3\xf1\xa6\x82\x11\x79\x79\xd9\x75\xd2\x83\xd6\x08\x52\x27\x0a\x8f\xc0\xa5\x6d\x4c\x29\x93\xac\x22\x73\x6b\xe7\x8a\xb3\x42\x00\x49\xad\xde\x62\x54\x89\x29\x50\xb9\x2c\xb9\x5b\xd3\x80\x04\x01\xa9\xef\x33\xa2\x85\x21\x12\xf0\x79\x44\x77\xa3\xf6\x73\x95\x30\x0b\xe4\xb8\x6a\x63\xf0\x6b\xc5\x21\xe7\xdc\x63\x94\x3b\x9e\xb5\x71\xee\x7d\x01\x9f\x28\xd5\xac\x4a\x67\x86\x4c\xad\xf5\xe0\x1d\x2b\x36\xc9\x86\xf1\x0d\xa0\x21\x09\xc9\x29\x4d\x01\xde\xb1\x2d\x61\x0a\x80\x91\x30\x9e\xcf\x9d\xf0\xeb\x36\x86\x9c\x85\xad\x93\x5a\xb0\x6c\xe9\x71\x6f\xd0\x19\x55\x2d\x19\x74\xca\x23\xd6\x98\x74\x13\x33\x14\xc7\x6a\xf1\x39\x5b\xad\xe2\x0e\x6b\xe5\xdd\xee\x4c\x3e\xa8\xe2\x9a\xcf\xab\x5c\x26\xfd\x38\xc8\xe6\x72\x32\xfc\xa2\x17\x4f\xd0\xc4\x28\x75\x16\xc0\x3a\x31\x17\xa6\x8d\x99\xb1\x66\xad\x6d\x09\xf8\x5f\x8b\xaa\xf9\x9c\x6b\xfe\x2b\x69\xd9\xf5\xe4\xf8\xa6\x1e\xa8\xfe\x52\xb2\xc5\xc5\xa2\x0a\x15\xed\x9f\xc5\x2c\x2f\x57\xc5\x28\xe3\x37\x8f\xc9\x69\xd8\x6b\xf0\x27\x13\x96\x0f\x4f\xac\x18\xd7\xcb\x66\x7c\x0f\x5f\xfb\xf2\x36\x39\xaa\xc7\xa6\xe1\x7e\x27\xed\xf0\x0e\xfe\x54\x8a\xfc\xb8\x1e\xf9\x43\x09\x75\x3d\x9a\xf6\xba\xf1\x95\x60\x2a\xd3\xe5\xc5\xc5\xed\xf0\xb4\x73\x72\xeb\x0a\xb7\x6c\x0c\x92\x6c\x12\x36\x87\x77\x77\xa1\x6c\xc4\xd7\xcb\x0a\x20\x58\x27\xcb\x81\x37\xbc\x30\x57\xc9\xf0\x8c\xf5\x9a\xd5\xe8\xe7\x12\xfe\xe2\xed\x65\xd6\xf8\x1a\x5b\x71\xb0\x9a\xd3\x13\xd2\x20\xf5\xed\xa6\x0e\xe1\xb7\x35\x6d\x2d\x48\x5f\x3d\x18\x4d\xed\x6c\xbd\xff\x83\x99\x78\x44\xa9\x62\x00\x6d\x9c\x5a\xe3\x99\x30\xdc\xe1\x57\x73\x7e\x5f\x55\xb5\x0a\x6a\x41\xf0\x56\xfd\x60\xde\x4b\x6b\x3c\x37\xfe\xdd\xbe\x1b\xca\x99\x78\xdc\x13\xbd\x86\x11\xdd\xb1\x47\x74\xf7\x36\x7c\x0b\x00\x00\xff\xff\x9f\xbd\x22\xd4\x33\x04\x00\x00")

func layoutGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutGoHtml,
		"layout.go.html",
	)
}

func layoutGoHtml() (*asset, error) {
	bytes, err := layoutGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.go.html", size: 1075, mode: os.FileMode(438), modTime: time.Unix(1494749355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x41\x6b\xfb\x30\x0c\xc5\xef\x85\x7e\x07\xe1\xc3\xff\xd6\x7f\x56\x76\xdb\x92\x5e\x06\x3b\x0d\x56\x58\xc7\xce\x6e\xac\x26\x06\x47\x32\xb6\xd2\x2e\x0b\xfd\xee\x23\x19\x49\x9d\xc1\x2e\x41\xe8\x3d\xfd\x9e\x22\xdc\xf7\x06\x4f\x96\x10\xd4\xe1\x60\xc5\xa1\xba\x5e\xd7\xab\x67\x1b\x23\xfc\xab\xe4\x11\x5e\xb8\xb2\xb4\x5e\xf5\x3d\x92\x19\x94\xa1\x9c\x07\x9e\x98\x04\x49\xc6\x91\xfc\xc4\xa1\x81\x06\xa5\x66\x53\xa8\xfd\xeb\xdb\x41\x81\x2e\xc5\x32\x15\x2a\x73\x03\x45\xed\xd6\x2b\x00\x80\xbc\xde\xee\x46\x6c\x9e\xd5\xdb\xa9\x67\xec\x19\x4a\xa7\x63\x2c\x54\xe0\xcb\x64\x5d\x0a\x17\x74\x4e\x41\x94\xce\x61\xa1\xbc\x36\xc6\x52\xf5\x00\xf7\x77\xfe\xf3\xe6\x07\xe8\x7b\xb0\x27\xf8\xff\x4e\xba\x95\x9a\x83\xfd\x42\x03\xc3\x82\x93\x9e\x12\xb5\xc3\x20\x30\x7e\x37\x46\x53\x85\x21\x25\x01\x7c\x04\xa6\x0a\xbc\x8e\xf1\xc2\xc1\x24\x8c\xcc\xd8\xf3\x32\x13\xe9\xef\x98\xe1\x34\x9b\x2a\x70\xeb\x97\xf8\xdc\x92\x6f\x05\xa4\xf3\xe3\x0f\xfd\xa4\x28\xf0\x4e\x97\x58\xb3\x33\x18\x0a\xb5\x9f\xdb\xa4\x9b\x85\x2d\x85\x97\x4c\x12\xd8\xa5\xf8\xdf\x3b\x2e\xc2\x62\x7b\x6c\xac\xcc\x8c\xa3\x10\x1c\x85\x36\x3e\xd8\x46\x87\x2e\x39\x7f\x02\xb9\xd5\x53\x95\x67\x43\xf8\x6e\x7e\x1e\xdf\x01\x00\x00\xff\xff\x64\x4c\x75\x07\x4c\x02\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 588, mode: os.FileMode(438), modTime: time.Unix(1495635715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rootListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x50\xc1\x6a\xeb\x30\x10\x3c\x47\x5f\xb1\xe8\xf1\x7a\xb3\x2d\x87\xa6\x85\x54\xd5\xa5\x10\x28\xd4\x3d\x34\xfe\x01\xa5\x5a\x47\x82\x58\x0a\xf6\x12\x08\x42\xff\x5e\x94\xd8\x21\xe4\x36\x9a\x9d\x59\xed\x4c\x8c\x06\x3b\xe7\x11\x78\xdb\x3a\x3a\x20\x4f\x89\x01\xc4\x58\x36\xfa\xd7\x3a\x8f\x29\xc1\xd3\x9e\xde\xe0\x27\x04\x82\x2f\x37\x12\x8b\x11\xbd\x49\x89\xb1\x3b\xeb\x47\xf0\x84\x9e\xb2\x59\xda\x5a\x6d\xdc\x01\xc7\xf3\x48\xd8\x5f\x7c\xa3\xac\x6c\xad\x98\x34\xee\xa4\x18\x80\x24\xbd\x3b\x60\x46\x19\x5b\xd4\xe6\x8a\xf3\x6b\x98\xe1\x42\x92\x55\xdf\xba\x47\x59\x91\x55\x6c\x31\x0b\xac\x6a\x82\x71\x9d\x43\x73\x1d\x4c\x7c\x35\x3b\x33\x7b\xdb\x28\x69\x17\xcc\x79\x16\xc5\x38\x68\xbf\x47\x28\xf3\x4d\x9f\xbe\x0b\xe3\x25\xeb\xf4\x31\x50\x8e\xff\xce\x63\x3c\x0e\xce\x53\x07\xfc\xff\xbf\x13\x87\x72\x7b\x1e\x53\xe2\x60\x34\xe9\xe2\xa8\xc9\x66\x45\x99\x0f\x4b\x89\xdf\xdd\x65\xd4\x8d\x96\x15\x99\xc7\x49\x13\x4c\xeb\x7a\x2c\x37\x61\xe8\x35\x01\x5f\x0a\xf1\x52\x88\xba\x10\x4b\xa8\x57\x6b\xf1\xbc\x16\x2b\x28\xc4\xab\x10\xd0\x6c\x5b\x3e\xef\x78\x0c\x97\x33\x5c\xcb\x9f\xf8\x39\x9e\xac\xa6\x4e\x65\x75\x29\x79\x92\xfd\x05\x00\x00\xff\xff\x43\x4d\x05\x00\xdd\x01\x00\x00")

func rootListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rootListGoHtml,
		"root-list.go.html",
	)
}

func rootListGoHtml() (*asset, error) {
	bytes, err := rootListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "root-list.go.html", size: 477, mode: os.FileMode(438), modTime: time.Unix(1495047598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"directory-list.go.html": directoryListGoHtml,
	"error.go.html": errorGoHtml,
	"layout.go.html": layoutGoHtml,
	"login.html": loginHtml,
	"root-list.go.html": rootListGoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"directory-list.go.html": &bintree{directoryListGoHtml, map[string]*bintree{}},
	"error.go.html": &bintree{errorGoHtml, map[string]*bintree{}},
	"layout.go.html": &bintree{layoutGoHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"root-list.go.html": &bintree{rootListGoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

