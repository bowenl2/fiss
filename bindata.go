package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func directory_list_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x94, 0x55,
		0xdf, 0x6f, 0xdb, 0x36, 0x10, 0x7e, 0x76, 0xfe, 0x8a, 0x9b, 0xba, 0x4e,
		0x09, 0x56, 0x49, 0x74, 0xb7, 0x76, 0x98, 0x22, 0x6b, 0xc0, 0xd6, 0x0e,
		0xe8, 0x43, 0xb6, 0x02, 0xc9, 0x1e, 0xf6, 0x48, 0x8b, 0x27, 0x89, 0x29,
		0x45, 0x6a, 0x24, 0x1d, 0xc7, 0xd3, 0xf4, 0xbf, 0x8f, 0xd4, 0x0f, 0x5b,
		0x6e, 0x83, 0x00, 0x0d, 0x11, 0xf8, 0xfc, 0xe9, 0xee, 0xbb, 0xbb, 0xef,
		0x4e, 0x74, 0xf6, 0xcd, 0xbb, 0x3f, 0x7f, 0xbb, 0xfb, 0xfb, 0xe3, 0x7b,
		0xa8, 0x6d, 0x23, 0xf2, 0x8b, 0x6c, 0xfe, 0x40, 0xca, 0xf2, 0x8b, 0x55,
		0x66, 0xb9, 0x15, 0x98, 0x77, 0x5d, 0x7c, 0x43, 0x8b, 0x9a, 0x4b, 0xec,
		0x7b, 0xf8, 0xae, 0xb2, 0xd7, 0xe0, 0x90, 0x8f, 0xd4, 0xd6, 0x7d, 0x9f,
		0x25, 0xa3, 0x8b, 0xf3, 0x15, 0x5c, 0x7e, 0x82, 0x5a, 0x63, 0xb9, 0x09,
		0x93, 0xa4, 0x54, 0xd2, 0x9a, 0xb8, 0x52, 0xaa, 0x12, 0x48, 0x5b, 0x6e,
		0xe2, 0x42, 0x35, 0x49, 0x61, 0xcc, 0x2f, 0x25, 0x6d, 0xb8, 0x38, 0x6c,
		0xfe, 0xda, 0xee, 0xa4, 0xdd, 0x7d, 0x7f, 0xa3, 0xa4, 0x0a, 0x41, 0xa3,
		0xd8, 0x84, 0xc6, 0x1e, 0x04, 0x9a, 0x1a, 0xd1, 0x86, 0x60, 0x0f, 0x2d,
		0x6e, 0x42, 0x8b, 0x8f, 0xd6, 0xc7, 0x84, 0x9e, 0xdd, 0x14, 0x9a, 0xb7,
		0x16, 0x8c, 0x2e, 0x36, 0x41, 0x92, 0xd0, 0x7b, 0xfa, 0xf8, 0x39, 0xbb,
		0xc7, 0x12, 0xc1, 0xb7, 0x26, 0xb9, 0xff, 0x67, 0x87, 0xfa, 0x90, 0xac,
		0xe3, 0xf5, 0x3a, 0x26, 0xd3, 0xb7, 0xb8, 0xe1, 0x32, 0xbe, 0x37, 0x41,
		0x9e, 0x25, 0x23, 0xd5, 0x89, 0xd4, 0x59, 0xdf, 0x5e, 0x96, 0x3b, 0x59,
		0x58, 0xae, 0xe4, 0xe5, 0x55, 0x77, 0xb1, 0x5a, 0x25, 0x09, 0xfc, 0xae,
		0x74, 0x81, 0xc0, 0xd4, 0x5e, 0x0a, 0x45, 0x19, 0x70, 0x69, 0xac, 0x13,
		0x05, 0x54, 0x09, 0x0f, 0x1c, 0xf7, 0x17, 0xab, 0xfe, 0xea, 0xda, 0x31,
		0x2c, 0xc9, 0x7c, 0x03, 0xce, 0x58, 0x6d, 0x15, 0x3b, 0xb8, 0x0f, 0xcf,
		0xb3, 0xda, 0xd2, 0xe2, 0x53, 0xa5, 0xd5, 0x4e, 0xb2, 0xa8, 0x50, 0x42,
		0xe9, 0x14, 0x5e, 0xac, 0x89, 0x3f, 0xd7, 0xfe, 0xe9, 0x0c, 0x61, 0xe9,
		0xcf, 0x00, 0x79, 0xe1, 0xa2, 0x51, 0xa4, 0x14, 0xc2, 0x51, 0x26, 0x18,
		0x64, 0x7a, 0x05, 0x61, 0x38, 0xb8, 0xb4, 0x94, 0x31, 0x2e, 0xab, 0x48,
		0x60, 0x69, 0x53, 0x58, 0x93, 0xf6, 0xd1, 0xc3, 0xbd, 0xfb, 0xb7, 0x74,
		0x2b, 0x10, 0xac, 0x86, 0x1c, 0x52, 0xa9, 0xec, 0x65, 0x5a, 0x72, 0x6d,
		0x6c, 0xe4, 0x46, 0x27, 0xd8, 0x15, 0x74, 0xb0, 0xaf, 0xb9, 0xc5, 0xc8,
		0xb4, 0xb4, 0xc0, 0x14, 0xa4, 0xda, 0x6b, 0xda, 0x5e, 0xc3, 0x9e, 0x33,
		0x5b, 0x3b, 0x1e, 0x47, 0x73, 0xe4, 0x98, 0xcb, 0x6f, 0xa8, 0xae, 0xb8,
		0x8c, 0xac, 0x6a, 0x9d, 0xc3, 0x9b, 0x31, 0xd1, 0x6a, 0x0a, 0xf8, 0x99,
		0xbc, 0x3c, 0xe6, 0xad, 0xe7, 0x00, 0x3f, 0xb3, 0x88, 0x0a, 0x5e, 0xc9,
		0xd4, 0x97, 0xb7, 0xac, 0x37, 0x05, 0x47, 0x30, 0xb0, 0x1c, 0x8d, 0x31,
		0xde, 0x13, 0xb0, 0x57, 0x70, 0x22, 0x39, 0x6f, 0x70, 0x4e, 0x3b, 0xa3,
		0x9a, 0x57, 0xf5, 0x02, 0x5e, 0x64, 0x84, 0x39, 0xe5, 0x50, 0x13, 0x9b,
		0xe9, 0x8a, 0x9d, 0x36, 0x5e, 0xe6, 0x56, 0x71, 0x69, 0x51, 0xcf, 0x0e,
		0xb1, 0xdc, 0x35, 0xa8, 0x79, 0xf1, 0x44, 0xe9, 0x30, 0xe4, 0x18, 0x9b,
		0x5d, 0x4a, 0xd6, 0x6a, 0x3c, 0x95, 0xac, 0x53, 0x69, 0xeb, 0x51, 0xdb,
		0x4b, 0xc5, 0xd8, 0xd5, 0x33, 0x23, 0xff, 0x81, 0xf8, 0x73, 0x0a, 0xf5,
		0x1b, 0xe2, 0xc6, 0x94, 0xd6, 0xea, 0x01, 0xf5, 0x33, 0x71, 0x64, 0xf8,
		0x3b, 0xc5, 0xd5, 0xcf, 0xf8, 0xbe, 0x25, 0xfe, 0x4c, 0xcd, 0xb9, 0xbd,
		0x1c, 0xb7, 0x31, 0x4b, 0xc6, 0x57, 0x39, 0xf3, 0x29, 0xfd, 0x96, 0xd6,
		0xeb, 0x7c, 0xf1, 0xf2, 0xba, 0x6f, 0x0e, 0x63, 0xfc, 0xc1, 0xef, 0xad,
		0xc3, 0x7f, 0xa5, 0x06, 0x3f, 0xc8, 0x52, 0xc5, 0x37, 0x8a, 0xdd, 0xf1,
		0x06, 0x63, 0xf7, 0x16, 0x34, 0xd4, 0x42, 0xf0, 0x9a, 0x90, 0xb7, 0x11,
		0x59, 0x47, 0xe4, 0xb5, 0x1b, 0x5c, 0x4a, 0x7e, 0x4c, 0xc9, 0x1b, 0x88,
		0xc8, 0x4f, 0x84, 0xc0, 0xcd, 0xed, 0x5d, 0xd0, 0xf7, 0x5f, 0x86, 0x63,
		0x3f, 0xd4, 0x31, 0x72, 0xcf, 0x29, 0xb2, 0x61, 0xbb, 0xbc, 0xe5, 0xcc,
		0xe9, 0x92, 0x19, 0x6c, 0x3d, 0x1a, 0x1e, 0xcd, 0xff, 0xa0, 0x0d, 0xba,
		0x7b, 0xa5, 0x5e, 0x40, 0x8e, 0x8f, 0x97, 0x1c, 0xd9, 0x39, 0x0c, 0x85,
		0xa0, 0xc6, 0x6c, 0x82, 0x69, 0x90, 0x41, 0x7e, 0xcb, 0xff, 0x7d, 0x22,
		0x72, 0x01, 0x39, 0x6b, 0xcc, 0xe4, 0xa1, 0x39, 0x7d, 0x66, 0x27, 0x71,
		0x56, 0xbe, 0x09, 0x4d, 0x65, 0x85, 0x10, 0xbf, 0x97, 0x56, 0x73, 0x34,
		0x43, 0x67, 0x43, 0x81, 0x30, 0x5c, 0x74, 0x9b, 0xa0, 0xeb, 0x5a, 0xed,
		0xf6, 0xa8, 0x84, 0xe0, 0xe5, 0x8b, 0x87, 0x00, 0xe2, 0xdb, 0x83, 0x73,
		0x0a, 0x8e, 0x19, 0x99, 0x97, 0xd7, 0x77, 0x30, 0xdc, 0x8d, 0xec, 0x1c,
		0xff, 0x5a, 0x55, 0x17, 0x0c, 0x5d, 0xc7, 0x4b, 0x88, 0x3f, 0x98, 0x77,
		0x5c, 0x4f, 0x35, 0x79, 0xd2, 0x2f, 0x14, 0x38, 0x8b, 0x40, 0x61, 0xf0,
		0x39, 0x67, 0x57, 0x91, 0x57, 0x0c, 0xfe, 0x83, 0xb2, 0xb1, 0xc6, 0x59,
		0x9f, 0x65, 0x44, 0xc9, 0x16, 0xe1, 0x53, 0x03, 0x67, 0x4e, 0x47, 0x3d,
		0x97, 0xde, 0x0e, 0x9c, 0x05, 0x75, 0xe6, 0x34, 0xf0, 0x69, 0x13, 0xb2,
		0x64, 0x7c, 0xe4, 0x56, 0xcf, 0xff, 0xd2, 0xfc, 0x1f, 0x00, 0x00, 0xff,
		0xff, 0xb8, 0xef, 0xbd, 0x46, 0x80, 0x06, 0x00, 0x00,
		},
		"directory-list.html",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"directory-list.html": directory_list_html,

}
