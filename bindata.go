// Code generated by go-bindata.
// sources:
// templates/directory-list.go.html
// templates/error.go.html
// templates/layout.go.html
// templates/root-list.go.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _directoryListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x0c\x78\xe8\x4d\x8f\x6c\x37\x6d\xa1\xc8\x2e\xba\xbb\x2d\xba\x40\xb2\x58\x74\x73\x2f\x68\x71\x64\x11\x4b\x93\x02\x45\xdb\x71\x5d\xfd\xf7\x0e\x65\x49\xd1\xc3\x36\xd2\x1c\xc2\xd1\x3c\xbf\x79\xfa\x74\x12\x98\x4b\x8d\xc0\x9e\x9f\xa5\x53\xc8\xea\x7a\x71\x3a\x85\x4f\x3c\x2b\x88\x5b\xd7\xf0\xc3\xc6\x3d\x00\x71\xbe\x72\x57\x34\x32\xd4\x82\xde\xc5\xc0\xf0\xa3\xd1\x0e\xb5\xf3\xa6\x69\xe5\x8e\x0a\xc1\x1d\x4b\x5c\x32\x87\x2f\x2e\xca\xaa\x8a\xad\x16\xb0\x53\x61\x66\x77\xdb\x35\x9c\xa0\xe4\x42\x48\xbd\x09\x14\xe6\x2e\x81\xf8\x01\xea\x05\x28\xd9\x8b\x85\xac\x4a\xc5\x8f\x09\x48\xad\xc8\xff\x03\xc9\x2a\x17\x34\x7e\x03\xef\x37\x01\x6d\x3c\x7b\x60\x95\xf0\xdc\xa1\x25\xdb\xec\x8c\x24\x01\x06\x11\xb0\xb1\x8e\xe2\xe4\x86\xb2\x52\x22\x59\x63\x6e\x2c\x8e\xf4\xaf\x2b\xcf\x7d\x37\xba\x69\xd4\x40\x5a\x2d\x16\xa9\x90\x7b\xc8\xc8\xa2\x5a\x32\x6b\x0e\x70\x40\xa5\x18\x34\xd2\x25\xdb\x72\xbb\x91\x3a\x70\xa6\x4c\xee\xee\xcb\x17\x5f\x0a\x18\x1a\x64\x46\x05\x2f\x55\xf0\x4b\x23\x20\x51\xf1\xe3\x99\x20\x72\xa7\x7a\x25\x8f\x89\x75\x02\xa0\x76\x58\xae\x37\x08\xe1\x07\x8b\x5c\x7c\xf4\xd2\x8a\x8a\x0f\xfd\x5f\xaa\xe4\x35\xdb\x46\xcc\xa1\xb0\x98\x2f\x19\xf5\xf5\x51\xea\xef\x75\xcd\x56\x44\x7e\xe0\x15\x6a\xbe\xa5\xae\xa7\x11\x1f\x5a\xa4\x91\x92\xc3\xe8\xe7\x11\xe8\x64\x3b\xd5\x62\x8f\x3a\xf0\xad\xaf\xcf\x3a\x37\xe1\x93\x11\xcf\x72\x8b\xe1\x1f\xc6\x6e\xb9\x03\xf6\x2e\x8e\x7f\x0a\xe2\xbb\x20\x7e\x07\x77\xf7\x49\xfc\x3e\x89\xef\x21\x88\x7f\x8e\x63\x78\xfa\xf6\xcc\x5a\xb7\x13\x07\xd8\xb2\x7d\xe1\x56\xfd\x2c\xa6\x91\xff\xf4\xf5\xec\x89\x79\x61\xdf\x83\x9f\xc2\xc0\xca\x4d\xe1\xba\x1a\x0f\xb4\xd6\x4e\x07\x1b\x6b\x76\x65\xb0\x47\xeb\x64\xc6\xa9\x73\xd6\xf8\xc6\x35\xdc\xbe\x6e\x54\xb1\x57\x0b\xf0\x56\x92\xb0\xb1\xb6\x8c\xbf\xe6\x5b\xb7\xcc\xaa\xfd\xa0\xcc\x69\xdf\x80\x9c\x43\xce\x03\x3f\xc4\x6c\x95\x46\x83\x3a\xfe\x85\xd9\xce\x56\x72\x8f\xf0\x48\xc2\xbe\x9c\xfc\x7a\x4c\xe1\xbb\x6e\x47\x51\x85\xba\x11\x34\x97\xb4\x33\xdc\xd2\x1c\xef\x31\x30\x93\xf0\xbf\x9d\xf9\x6f\x89\x5b\x5a\x49\x73\x7c\xec\x02\x47\x37\x42\x16\x66\x8b\x93\x40\x7f\x12\xeb\x2d\x51\x0e\xdc\x6a\xba\x0b\x5d\x94\x30\xbc\x15\x47\xe1\x1e\x55\xe0\x3b\x34\x8a\xf5\x95\x5b\xda\xd1\x69\xb4\xe9\xa4\x74\xcf\x78\x71\xcf\xbb\xe9\xf8\x9a\x0e\x58\xcb\x3d\x7f\x34\xff\xe9\x02\x59\x59\xa2\x68\xbf\x0a\x43\x03\xd3\xd2\x6b\x63\x05\x5a\x14\xdd\x7c\xb9\x82\xb6\xb2\xcf\xd3\xd9\x41\x16\xae\x58\x7d\xa1\x0d\x4b\x23\x22\x46\x5c\x9a\x72\x99\x4b\x14\x33\x49\x0f\x65\x30\xc6\xdf\xe4\x3f\x97\x5d\x5c\xe0\x7e\x7a\x1c\xf2\x88\xb6\x5d\x4d\x06\x30\x53\xb7\x36\xe2\xd8\x29\xf5\xe7\xe5\x77\x4d\x39\xe3\xf0\xb4\x50\x36\x1d\xa0\xd3\x49\xe6\x10\x7e\xae\x3e\x49\x5b\xd7\x7e\x1b\xda\xbb\xc0\x40\x70\xc7\x83\x92\x76\xd4\x2b\xf9\x97\x06\x15\x42\x7f\x64\x86\x37\xc5\x89\xab\x47\x69\x64\x43\xfb\xfe\xe5\xf2\x51\x1a\x7b\xf0\x0e\xfd\x2f\xd7\xff\xbc\x37\x53\x37\xa3\xb4\xc6\x00\x9d\xb8\xd4\x8c\xb9\x03\x54\x15\xbe\xcd\x96\xf0\xfa\x5e\xc2\xbf\x50\xd1\x43\x29\x5f\xc2\x33\xbc\xb6\xe3\x44\x71\xae\x3e\x2b\x6b\x93\x8f\x36\xee\x72\x4e\xd7\xca\x3e\xbf\x2d\xbd\xfe\x64\x11\x85\x39\x68\x65\xb8\x98\x2c\x62\xd7\x23\x3e\x45\x33\xcd\xe6\x6a\xe3\x69\xb9\xec\x06\xdd\x92\xfd\xbd\x56\x5c\x7f\x9f\x41\x99\x02\xa1\xb2\xa2\xd5\x5c\xd1\xa9\xf5\xda\x33\x34\x37\xc7\xe7\x75\x2f\xc6\x18\x89\xdf\x6d\x06\x91\x7e\xdb\xfb\xeb\xd1\xa9\xfd\x17\x00\x00\xff\xff\x2f\x6a\x77\xde\x42\x09\x00\x00")

func directoryListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_directoryListGoHtml,
		"directory-list.go.html",
	)
}

func directoryListGoHtml() (*asset, error) {
	bytes, err := directoryListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "directory-list.go.html", size: 2370, mode: os.FileMode(436), modTime: time.Unix(1450994747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x41\xcb\x82\x40\x10\x86\xef\xfe\x8a\x61\x3f\xbe\xab\x12\x78\x0a\xf1\x12\x1d\xbb\x84\x7f\x40\xf0\xb5\x84\x5a\x75\x9c\x8a\x98\xf6\xbf\x37\x6e\x04\x79\xf0\xb2\xec\xfb\xf2\x3c\x33\x8c\x6a\x83\xb6\xf3\x20\x57\x55\x9d\x5c\xe0\x42\x48\x88\xf6\xcc\x3d\x27\xaa\xf0\x8d\xe5\xe4\x07\xda\xf5\x5e\xe0\x65\xc6\x8a\xf3\xa6\x8c\x60\x91\xd9\xcf\x62\x5e\x1e\x30\x4d\xf5\x09\x5b\x6b\x72\x6b\x06\x46\xa9\x9a\x82\x39\x8d\x60\x08\x45\x36\x77\x91\x3d\xd6\x8f\xcf\x9e\x25\x6d\xaf\xc8\xb3\xbd\x0a\xcd\x1e\xbd\x68\xe0\xce\x4b\x4b\xee\xff\x8f\xee\x6e\x39\x01\xe3\x0d\x93\xac\xfa\x8c\x71\xd5\xff\xde\xf6\x0e\x00\x00\xff\xff\xd6\x44\xe1\x7f\x00\x01\x00\x00")

func errorGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorGoHtml,
		"error.go.html",
	)
}

func errorGoHtml() (*asset, error) {
	bytes, err := errorGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.go.html", size: 256, mode: os.FileMode(436), modTime: time.Unix(1448692517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\xdd\x4e\xe3\x3c\x10\xbd\xff\x9e\xc2\x9f\x6f\x51\xe3\x86\x50\x5a\x56\x29\x52\xa1\xd9\x45\x15\xa5\x85\x56\xe9\xc2\x9d\x9b\x3a\x89\x5d\xff\x24\xb6\x43\x13\x10\xef\xbe\x49\x5b\xa0\x8b\xf6\x47\x2b\xed\x5e\x65\x7c\xc6\x9e\x33\x47\x33\x27\xfe\xff\xc3\xc9\xe5\xfc\x7e\x1a\x80\xd4\x0a\x7e\xfe\x9f\xbf\xfb\x00\xe0\xa7\x04\xaf\x9a\xa0\x0e\x2d\xb5\x9c\xec\x62\x00\x9e\x9f\x2d\x11\x19\xc7\x96\x00\x38\x9f\x37\x19\x08\x9c\x97\x97\xdd\x4d\x74\x70\xd5\x37\x91\xa6\x99\x05\x46\x47\x7d\x88\x10\x66\xb8\x74\x12\xa5\x12\x4e\x70\x46\x8d\x13\x29\xb1\xc5\x10\xa7\x4b\x83\x58\x5e\x10\x5d\x21\xd7\x71\x5d\xa7\xbd\x3f\x39\x82\x4a\x87\x19\x78\xee\xa3\x5d\xa9\x7d\x5d\x4e\xe5\x1a\x68\xc2\xfb\xd0\xd8\x8a\x13\x93\x12\x62\x21\x48\x35\x89\xfb\x30\xb5\x36\x33\x9f\x10\x12\xb8\x8c\x56\xd2\x59\x2a\x65\x8d\xd5\x38\x6b\x0e\x0d\xe3\x1b\x80\x3c\xc7\x73\x4e\x51\x64\xcc\x3b\xb6\x25\xac\x11\x08\xa8\xb4\x24\xd1\xd4\x56\x35\x47\x8a\xbd\xde\x49\xcb\xcd\x7b\x62\x3e\x9a\x0c\x66\x65\x8f\xb9\x83\xe2\x08\x77\x16\xc3\x50\x4e\xe9\x31\x5f\x7f\x8e\x37\x9b\x60\x80\x7b\xe9\x70\xb8\x62\x0f\x3c\xbb\x26\x49\x99\xb2\x70\x1c\xb8\x71\xc2\x16\xd3\x2f\x62\xfd\x64\xba\x10\x44\x5a\x19\xa3\x34\x4d\xa8\xec\x43\x2c\x95\xac\x84\x2a\x6a\x75\xff\x58\x54\xcb\xa6\x44\x90\x5f\x49\x8b\xaf\x17\xc7\x37\x6d\x97\x8f\x73\x86\xd7\x17\xeb\xd2\xe3\x68\x7c\x16\xe0\xb4\xd8\x64\xb3\x98\xdc\x3c\x86\xa7\xde\xa8\x43\x9e\xa4\x57\x3c\x3c\xe1\x6c\xde\x2e\xba\xc1\xbd\xf9\x3a\x66\xb7\xe1\x51\x3b\x90\x1d\xfd\x3b\x69\x87\x7b\xf0\xa7\x52\xd8\xc7\xf1\xb0\x1f\x4a\x68\x8b\xd9\x72\x34\x0c\xae\x28\xe6\xb1\x28\x2e\x2e\x6e\xa7\xa7\x83\x93\x5b\x9d\xe9\xbc\x33\x09\xe3\x85\xd7\x9d\xde\xdd\x79\xac\x13\x5c\xe7\xa5\x31\x6e\x15\xe6\x13\x2b\x49\x26\xaf\xc2\xe9\x19\x1e\x75\xcb\xd9\xcf\x25\xfc\xc5\xdd\x8b\x95\xb4\x2d\xbc\x21\x46\x09\x82\x4e\x9c\x4e\xbd\xe8\xcd\xa4\x0e\xe1\xb7\x31\x6d\x2d\x88\x5e\x3d\xe8\x2f\xd5\xaa\xda\x77\xb0\xa2\x8f\x20\xe2\xd8\x98\x3e\x8c\xea\x97\x98\x4a\xa2\xe1\xab\x39\xbf\xcf\xf2\x56\x69\x5a\xae\xfb\x96\xfd\x60\xde\xcb\xfa\x39\x91\xf6\xdd\xbe\x0d\x65\x5d\x60\x4f\xf4\x1a\xfa\x68\xc7\x5e\xb7\xb3\xfd\x37\x7c\x0b\x00\x00\xff\xff\x9f\xbd\x22\xd4\x33\x04\x00\x00")

func layoutGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutGoHtml,
		"layout.go.html",
	)
}

func layoutGoHtml() (*asset, error) {
	bytes, err := layoutGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.go.html", size: 1075, mode: os.FileMode(436), modTime: time.Unix(1449453577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rootListGoHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcd\x6a\xc3\x30\x10\x84\xcf\xf5\x53\x2c\x2a\xed\xcd\xb6\x1c\x9a\x16\x52\xd5\x97\x42\xa0\x50\xf7\xd0\xf8\x05\x94\x6a\x1d\x0b\x6c\x29\xd8\x4b\xc0\x08\xbf\x7b\x25\xff\x34\x25\xb7\xd1\xc7\xac\x76\x66\x9d\x53\x58\x69\x83\xc0\xca\x52\x53\x83\x6c\x1c\x23\x00\xe7\x92\x42\xfe\xd4\x9e\x8f\x23\x3c\x9e\xe8\x15\xbe\xad\x25\xf8\xd4\x3d\x45\xce\xa1\x51\xde\x15\xfd\x1b\x7d\xb7\x86\xd0\x50\x18\x16\x75\x96\xef\x75\x83\xfd\xd0\x13\xb6\xd3\x5c\x2f\x52\x0f\x23\xa1\xf4\x25\xf7\x9f\x0b\x92\xc7\x06\x83\x0a\xba\x46\xa9\x66\x1d\x5e\x5d\x1e\xdd\x79\x96\x7f\xc9\x16\x45\xea\xc5\xfc\x2c\xac\xd2\x95\x46\x35\xa3\xc5\x9c\x06\xf7\xa2\xae\xbf\x08\x3a\x5a\x35\xac\x26\xe7\x3a\x69\x4e\x08\x49\xc8\xf1\x61\x2a\xdb\x4f\xfd\x96\x65\x40\xa1\xf2\x1b\x73\xee\xdc\x69\x43\x15\xb0\x87\xfb\x0b\x83\xe4\x30\x78\x1b\x03\x25\x49\xc6\x67\x49\x75\x70\x24\x21\x92\xa7\x53\x22\x95\xff\x01\xbf\x5c\x5d\x99\x0f\x5a\xea\x16\x93\xbd\xed\x5a\x49\xc0\x36\x9c\x3f\xc7\x3c\x8b\xf9\x06\xb2\xed\x8e\x3f\xed\xf8\x16\x62\xfe\xc2\x39\x14\x87\x92\xad\xd3\xb7\x85\x42\xee\xf9\xc8\x0b\x5f\x2b\x79\x39\xdf\x4e\xa4\xd3\x31\x17\xdb\x6f\x00\x00\x00\xff\xff\xa9\xd6\xa7\x5b\xc5\x01\x00\x00")

func rootListGoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rootListGoHtml,
		"root-list.go.html",
	)
}

func rootListGoHtml() (*asset, error) {
	bytes, err := rootListGoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "root-list.go.html", size: 453, mode: os.FileMode(436), modTime: time.Unix(1448692517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"directory-list.go.html": directoryListGoHtml,
	"error.go.html": errorGoHtml,
	"layout.go.html": layoutGoHtml,
	"root-list.go.html": rootListGoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"directory-list.go.html": &bintree{directoryListGoHtml, map[string]*bintree{}},
	"error.go.html": &bintree{errorGoHtml, map[string]*bintree{}},
	"layout.go.html": &bintree{layoutGoHtml, map[string]*bintree{}},
	"root-list.go.html": &bintree{rootListGoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

